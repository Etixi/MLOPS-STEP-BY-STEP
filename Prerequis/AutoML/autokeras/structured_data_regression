{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"nElGQ4eKprlt"},"outputs":[],"source":["!pip install autokeras"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mgSF_x3Vprlv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707783858570,"user_tz":-60,"elapsed":14462,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"5c74f0a9-6ac1-42a9-c9c6-04b901414e51"},"outputs":[{"output_type":"stream","name":"stdout","text":["Using TensorFlow backend\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","from sklearn.datasets import fetch_california_housing\n","\n","import autokeras as ak"]},{"cell_type":"markdown","metadata":{"id":"HDFDtlTwprlv"},"source":["## A Simple Example\n","The first step is to prepare your data. Here we use the [California housing\n","dataset](\n","https://scikit-learn.org/stable/datasets/real_world.html#california-housing-dataset)\n","as an example.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"q5mE0ulyprlx"},"outputs":[],"source":["house_dataset = fetch_california_housing()\n","df = pd.DataFrame(\n","    np.concatenate(\n","        (house_dataset.data, house_dataset.target.reshape(-1, 1)), axis=1\n","    ),\n","    columns=house_dataset.feature_names + [\"Price\"],\n",")\n","train_size = int(df.shape[0] * 0.9)\n","df[:train_size].to_csv(\"train.csv\", index=False)\n","df[train_size:].to_csv(\"eval.csv\", index=False)\n","train_file_path = \"train.csv\"\n","test_file_path = \"eval.csv\""]},{"cell_type":"markdown","metadata":{"id":"H3O1-8FOprly"},"source":["The second step is to run the\n","[StructuredDataRegressor](/structured_data_regressor).\n","As a quick demo, we set epochs to 10.\n","You can also leave the epochs unspecified for an adaptive number of epochs.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M_Z-MlXwprly","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707784013333,"user_tz":-60,"elapsed":121868,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"cda4de76-2eaf-4f0e-a1a1-f0475da409a2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 3 Complete [00h 00m 29s]\n","val_loss: 1.5390816926956177\n","\n","Best val_loss So Far: 0.8475037217140198\n","Total elapsed time: 00h 01m 25s\n","Epoch 1/10\n","581/581 [==============================] - 2s 3ms/step - loss: 1.9853 - mean_squared_error: 1.9853\n","Epoch 2/10\n","581/581 [==============================] - 1s 3ms/step - loss: 0.7469 - mean_squared_error: 0.7469\n","Epoch 3/10\n","581/581 [==============================] - 1s 3ms/step - loss: 0.6134 - mean_squared_error: 0.6134\n","Epoch 4/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.5558 - mean_squared_error: 0.5558\n","Epoch 5/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5301 - mean_squared_error: 0.5301\n","Epoch 6/10\n","581/581 [==============================] - 1s 3ms/step - loss: 0.5192 - mean_squared_error: 0.5192\n","Epoch 7/10\n","581/581 [==============================] - 1s 3ms/step - loss: 0.5149 - mean_squared_error: 0.5149\n","Epoch 8/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5166 - mean_squared_error: 0.5166\n","Epoch 9/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5267 - mean_squared_error: 0.5267\n","Epoch 10/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5371 - mean_squared_error: 0.5371\n","65/65 [==============================] - 0s 2ms/step\n","65/65 [==============================] - 0s 2ms/step\n","65/65 [==============================] - 0s 2ms/step - loss: 0.3952 - mean_squared_error: 0.3952\n","[0.3951798379421234, 0.3951798379421234]\n"]}],"source":["# Initialize the structured data regressor.\n","reg = ak.StructuredDataRegressor(\n","    overwrite=True, max_trials=3\n",")  # It tries 3 different models.\n","# Feed the structured data regressor with training data.\n","reg.fit(\n","    # The path to the train.csv file.\n","    train_file_path,\n","    # The name of the label column.\n","    \"Price\",\n","    epochs=10,\n",")\n","# Predict with the best model.\n","predicted_y = reg.predict(test_file_path)\n","# Evaluate the best model with testing data.\n","print(reg.evaluate(test_file_path, \"Price\"))"]},{"cell_type":"markdown","metadata":{"id":"iP2dyWQpprly"},"source":["## Data Format\n","The AutoKeras StructuredDataRegressor is quite flexible for the data format.\n","\n","The example above shows how to use the CSV files directly. Besides CSV files,\n","it also supports numpy.ndarray, pandas.DataFrame or [tf.data.Dataset](\n","https://www.tensorflow.org/api_docs/python/tf/data/Dataset?version=stable). The\n","data should be two-dimensional with numerical or categorical values.\n","\n","For the regression targets, it should be a vector of numerical values.\n","AutoKeras accepts numpy.ndarray, pandas.DataFrame, or pandas.Series.\n","\n","The following examples show how the data can be prepared with numpy.ndarray,\n","pandas.DataFrame, and tensorflow.data.Dataset.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5bc5YvH9prlz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707784177205,"user_tz":-60,"elapsed":298,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"e655fe40-1637-43a7-ec08-84d35ca015e8"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","<class 'pandas.core.series.Series'>\n"]}],"source":["# x_train as pandas.DataFrame, y_train as pandas.Series\n","x_train = pd.read_csv(train_file_path)\n","print(type(x_train))  # pandas.DataFrame\n","y_train = x_train.pop(\"Price\")\n","print(type(y_train))  # pandas.Series"]},{"cell_type":"code","source":["# You can also use pandas.DataFrame for y_train.\n","y_train = pd.DataFrame(y_train)\n","print(type(y_train))  # pandas.DataFrame\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uDS7hLsr3m-C","executionInfo":{"status":"ok","timestamp":1707784179930,"user_tz":-60,"elapsed":3,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"c31d878e-1c4f-4a8e-e782-546f2f155a02"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n"]}]},{"cell_type":"code","source":["# You can also use numpy.ndarray for x_train and y_train.\n","x_train = x_train.to_numpy()\n","y_train = y_train.to_numpy()\n","print(type(x_train))  # numpy.ndarray\n","print(type(y_train))  # numpy.ndarray"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7RG_3yIC3kqd","executionInfo":{"status":"ok","timestamp":1707784185441,"user_tz":-60,"elapsed":289,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"e205184a-daf7-4f12-f7ac-d63dc2af9f90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'numpy.ndarray'>\n","<class 'numpy.ndarray'>\n"]}]},{"cell_type":"code","source":["# Preparing testing data.\n","x_test = pd.read_csv(test_file_path)\n","y_test = x_test.pop(\"Price\")"],"metadata":{"id":"1prZVA2D3fM3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# It tries 10 different models.\n","reg = ak.StructuredDataRegressor(max_trials=3, overwrite=True)\n","# Feed the structured data regressor with training data.\n","reg.fit(x_train, y_train, epochs=10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"caPYJYGt3iUm","executionInfo":{"status":"ok","timestamp":1707784309252,"user_tz":-60,"elapsed":118205,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"31d3e00d-c99f-4969-c67f-9ec95e075d60"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 3 Complete [00h 00m 29s]\n","val_loss: 1.6247987747192383\n","\n","Best val_loss So Far: 0.9216700792312622\n","Total elapsed time: 00h 01m 25s\n","Epoch 1/10\n","581/581 [==============================] - 2s 2ms/step - loss: 1.2309 - mean_squared_error: 1.2309\n","Epoch 2/10\n","581/581 [==============================] - 1s 2ms/step - loss: 0.6335 - mean_squared_error: 0.6335\n","Epoch 3/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.5573 - mean_squared_error: 0.5573\n","Epoch 4/10\n","581/581 [==============================] - 1s 2ms/step - loss: 0.5342 - mean_squared_error: 0.5342\n","Epoch 5/10\n","581/581 [==============================] - 1s 2ms/step - loss: 0.5206 - mean_squared_error: 0.5206\n","Epoch 6/10\n","581/581 [==============================] - 1s 3ms/step - loss: 0.5120 - mean_squared_error: 0.5120\n","Epoch 7/10\n","581/581 [==============================] - 1s 3ms/step - loss: 0.5055 - mean_squared_error: 0.5055\n","Epoch 8/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.4969 - mean_squared_error: 0.4969\n","Epoch 9/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.4906 - mean_squared_error: 0.4906\n","Epoch 10/10\n","581/581 [==============================] - 1s 2ms/step - loss: 0.4882 - mean_squared_error: 0.4882\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7dcbb0c7a7d0>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Predict with the best model.\n","predicted_y = reg.predict(x_test)\n","# Evaluate the best model with testing data.\n","print(reg.evaluate(x_test, y_test))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vMRWocYd3dBy","executionInfo":{"status":"ok","timestamp":1707784569673,"user_tz":-60,"elapsed":2990,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"294376a9-7ce3-405d-f3b3-badf7569356a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["65/65 [==============================] - 0s 2ms/step\n","65/65 [==============================] - 0s 2ms/step\n","65/65 [==============================] - 0s 3ms/step - loss: 0.6280 - mean_squared_error: 0.6280\n","[0.6280096173286438, 0.6280096173286438]\n"]}]},{"cell_type":"markdown","metadata":{"id":"_d_8jXahprlz"},"source":["The following code shows how to convert numpy.ndarray to tf.data.Dataset.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UyKVPeDjprlz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707784751216,"user_tz":-60,"elapsed":177240,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"90b9ab52-fbc4-4f05-88e3-8c7fa958dc4b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 3 Complete [00h 00m 40s]\n","val_loss: 2.3879103660583496\n","\n","Best val_loss So Far: 0.9076324105262756\n","Total elapsed time: 00h 02m 11s\n","Epoch 1/10\n","581/581 [==============================] - 3s 4ms/step - loss: 1.0866 - mean_squared_error: 1.0866\n","Epoch 2/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.6088 - mean_squared_error: 0.6088\n","Epoch 3/10\n","581/581 [==============================] - 3s 5ms/step - loss: 0.5666 - mean_squared_error: 0.5666\n","Epoch 4/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5448 - mean_squared_error: 0.5448\n","Epoch 5/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.5351 - mean_squared_error: 0.5351\n","Epoch 6/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5274 - mean_squared_error: 0.5274\n","Epoch 7/10\n","581/581 [==============================] - 2s 3ms/step - loss: 0.5208 - mean_squared_error: 0.5208\n","Epoch 8/10\n","581/581 [==============================] - 3s 5ms/step - loss: 0.5146 - mean_squared_error: 0.5146\n","Epoch 9/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.5081 - mean_squared_error: 0.5081\n","Epoch 10/10\n","581/581 [==============================] - 2s 4ms/step - loss: 0.5025 - mean_squared_error: 0.5025\n","65/65 [==============================] - 0s 4ms/step\n","65/65 [==============================] - 0s 5ms/step\n","65/65 [==============================] - 0s 3ms/step - loss: 0.6278 - mean_squared_error: 0.6278\n","[0.6277693510055542, 0.6277693510055542]\n"]}],"source":["train_set = tf.data.Dataset.from_tensor_slices((x_train, y_train))\n","test_set = tf.data.Dataset.from_tensor_slices((x_test, y_test))\n","\n","reg = ak.StructuredDataRegressor(max_trials=3, overwrite=True)\n","# Feed the tensorflow Dataset to the regressor.\n","reg.fit(train_set, epochs=10)\n","# Predict with the best model.\n","predicted_y = reg.predict(test_set)\n","# Evaluate the best model with testing data.\n","print(reg.evaluate(test_set))"]},{"cell_type":"markdown","metadata":{"id":"hExWOk4tprl0"},"source":["You can also specify the column names and types for the data as follows.  The\n","`column_names` is optional if the training data already have the column names,\n","e.g.  pandas.DataFrame, CSV file.  Any column, whose type is not specified will\n","be inferred from the training data.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UvwRh-Uqprl0"},"outputs":[],"source":["# Initialize the structured data regressor.\n","reg = ak.StructuredDataRegressor(\n","    column_names=[\n","        \"MedInc\",\n","        \"HouseAge\",\n","        \"AveRooms\",\n","        \"AveBedrms\",\n","        \"Population\",\n","        \"AveOccup\",\n","        \"Latitude\",\n","        \"Longitude\",\n","    ],\n","    column_types={\"MedInc\": \"numerical\", \"Latitude\": \"numerical\"},\n","    max_trials=10,  # It tries 10 different models.\n","    overwrite=True,\n",")"]},{"cell_type":"markdown","metadata":{"id":"ExNbjx6kprl0"},"source":["## Validation Data\n","By default, AutoKeras use the last 20% of training data as validation data.  As\n","shown in the example below, you can use `validation_split` to specify the\n","percentage.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"V_NKZ4dJprl1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707785165625,"user_tz":-60,"elapsed":356362,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"a1db927c-e047-4d4f-cb27-db5c5368e797"},"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 10 Complete [00h 00m 51s]\n","val_loss: 0.702720582485199\n","\n","Best val_loss So Far: 0.702720582485199\n","Total elapsed time: 00h 05m 01s\n","Epoch 1/10\n","581/581 [==============================] - 6s 9ms/step - loss: 0.9854 - mean_squared_error: 0.9854\n","Epoch 2/10\n","581/581 [==============================] - 4s 6ms/step - loss: 0.6688 - mean_squared_error: 0.6688\n","Epoch 3/10\n","581/581 [==============================] - 4s 7ms/step - loss: 0.6000 - mean_squared_error: 0.6000\n","Epoch 4/10\n","581/581 [==============================] - 5s 9ms/step - loss: 0.5657 - mean_squared_error: 0.5657\n","Epoch 5/10\n","581/581 [==============================] - 4s 7ms/step - loss: 0.5446 - mean_squared_error: 0.5446\n","Epoch 6/10\n","581/581 [==============================] - 4s 7ms/step - loss: 0.5318 - mean_squared_error: 0.5318\n","Epoch 7/10\n","581/581 [==============================] - 5s 9ms/step - loss: 0.5205 - mean_squared_error: 0.5205\n","Epoch 8/10\n","581/581 [==============================] - 4s 7ms/step - loss: 0.5152 - mean_squared_error: 0.5152\n","Epoch 9/10\n","581/581 [==============================] - 4s 8ms/step - loss: 0.5080 - mean_squared_error: 0.5080\n","Epoch 10/10\n","581/581 [==============================] - 4s 7ms/step - loss: 0.4991 - mean_squared_error: 0.4991\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7dcbb304fac0>"]},"metadata":{},"execution_count":13}],"source":["reg.fit(\n","    x_train,\n","    y_train,\n","    # Split the training data and use the last 15% as validation data.\n","    validation_split=0.15,\n","    epochs=10,\n",")"]},{"cell_type":"markdown","metadata":{"id":"EcW-RUHuprl1"},"source":["You can also use your own validation set\n","instead of splitting it from the training data with `validation_data`.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BEZRHDX9prl1"},"outputs":[],"source":["split = 500\n","x_val = x_train[split:]\n","y_val = y_train[split:]\n","x_train = x_train[:split]\n","y_train = y_train[:split]\n","reg.fit(\n","    x_train,\n","    y_train,\n","    # Use your own validation set.\n","    validation_data=(x_val, y_val),\n","    epochs=10,\n",")"]},{"cell_type":"markdown","metadata":{"id":"vfNYg8xzprl1"},"source":["## Customized Search Space\n","For advanced users, you may customize your search space by using\n","[AutoModel](/auto_model/#automodel-class) instead of\n","[StructuredDataRegressor](/structured_data_regressor). You can configure the\n","[StructuredDataBlock](/block/#structureddatablock-class) for some high-level\n","configurations, e.g., `categorical_encoding` for whether to use the\n","[CategoricalToNumerical](/block/#categoricaltonumerical-class). You can also do\n","not specify these arguments, which would leave the different choices to be\n","tuned automatically. See the following example for detail.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"npcsUlMOprl1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707785298359,"user_tz":-60,"elapsed":17158,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"8196cca0-8d7a-4d27-af30-918fe3880594"},"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 3 Complete [00h 00m 04s]\n","val_loss: 2.1213912963867188\n","\n","Best val_loss So Far: 2.1213912963867188\n","Total elapsed time: 00h 00m 11s\n","Epoch 1/10\n","16/16 [==============================] - 1s 3ms/step - loss: 4.1163 - mean_squared_error: 4.1163\n","Epoch 2/10\n","16/16 [==============================] - 0s 3ms/step - loss: 2.9123 - mean_squared_error: 2.9123\n","Epoch 3/10\n","16/16 [==============================] - 0s 4ms/step - loss: 2.2461 - mean_squared_error: 2.2461\n","Epoch 4/10\n","16/16 [==============================] - 0s 3ms/step - loss: 1.8076 - mean_squared_error: 1.8076\n","Epoch 5/10\n","16/16 [==============================] - 0s 3ms/step - loss: 1.5006 - mean_squared_error: 1.5006\n","Epoch 6/10\n","16/16 [==============================] - 0s 3ms/step - loss: 1.2887 - mean_squared_error: 1.2887\n","Epoch 7/10\n","16/16 [==============================] - 0s 3ms/step - loss: 1.1443 - mean_squared_error: 1.1443\n","Epoch 8/10\n","16/16 [==============================] - 0s 3ms/step - loss: 1.0469 - mean_squared_error: 1.0469\n","Epoch 9/10\n","16/16 [==============================] - 0s 3ms/step - loss: 0.9661 - mean_squared_error: 0.9661\n","Epoch 10/10\n","16/16 [==============================] - 0s 4ms/step - loss: 0.9097 - mean_squared_error: 0.9097\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7dcbb243cc40>"]},"metadata":{},"execution_count":15}],"source":["input_node = ak.StructuredDataInput()\n","output_node = ak.StructuredDataBlock(categorical_encoding=True)(input_node)\n","output_node = ak.RegressionHead()(output_node)\n","reg = ak.AutoModel(\n","    inputs=input_node, outputs=output_node, overwrite=True, max_trials=3\n",")\n","reg.fit(x_train, y_train, epochs=10)"]},{"cell_type":"markdown","metadata":{"id":"u1tPRMY-prl2"},"source":["The usage of [AutoModel](/auto_model/#automodel-class) is similar to the\n","[functional API](https://www.tensorflow.org/guide/keras/functional) of Keras.\n","Basically, you are building a graph, whose edges are blocks and the nodes are\n","intermediate outputs of blocks.  To add an edge from `input_node` to\n","`output_node` with `output_node = ak.[some_block]([block_args])(input_node)`.\n","\n","You can even also use more fine grained blocks to customize the search space\n","even further. See the following example.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"68b7f-9_prl2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707785707724,"user_tz":-60,"elapsed":14688,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"820cbbf9-9da1-4989-f2f9-c7bbe26a48bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 3 Complete [00h 00m 03s]\n","val_loss: 3.5052738189697266\n","\n","Best val_loss So Far: 1.7892706394195557\n","Total elapsed time: 00h 00m 10s\n","Epoch 1/10\n","16/16 [==============================] - 1s 3ms/step - loss: 3214.4858 - mean_squared_error: 3214.4858\n","Epoch 2/10\n","16/16 [==============================] - 0s 3ms/step - loss: 2100.6775 - mean_squared_error: 2100.6775\n","Epoch 3/10\n","16/16 [==============================] - 0s 3ms/step - loss: 1250.4463 - mean_squared_error: 1250.4463\n","Epoch 4/10\n","16/16 [==============================] - 0s 3ms/step - loss: 712.6151 - mean_squared_error: 712.6151\n","Epoch 5/10\n","16/16 [==============================] - 0s 3ms/step - loss: 644.6396 - mean_squared_error: 644.6396\n","Epoch 6/10\n","16/16 [==============================] - 0s 3ms/step - loss: 274.9531 - mean_squared_error: 274.9531\n","Epoch 7/10\n","16/16 [==============================] - 0s 3ms/step - loss: 187.5598 - mean_squared_error: 187.5598\n","Epoch 8/10\n","16/16 [==============================] - 0s 3ms/step - loss: 120.5079 - mean_squared_error: 120.5079\n","Epoch 9/10\n","16/16 [==============================] - 0s 3ms/step - loss: 97.8278 - mean_squared_error: 97.8278\n","Epoch 10/10\n","16/16 [==============================] - 0s 3ms/step - loss: 67.4997 - mean_squared_error: 67.4997\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7dcbb1e9f5e0>"]},"metadata":{},"execution_count":16}],"source":["input_node = ak.StructuredDataInput()\n","output_node = ak.CategoricalToNumerical()(input_node)\n","output_node = ak.DenseBlock()(output_node)\n","output_node = ak.RegressionHead()(output_node)\n","reg = ak.AutoModel(\n","    inputs=input_node, outputs=output_node, max_trials=3, overwrite=True\n",")\n","reg.fit(x_train, y_train, epochs=10)"]},{"cell_type":"markdown","metadata":{"id":"kjrR1Oajprl3"},"source":["You can also export the best model found by AutoKeras as a Keras Model.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nYR6flJbprl3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707785885950,"user_tz":-60,"elapsed":1101,"user":{"displayName":"Etienne Koa","userId":"11810615111108491499"}},"outputId":"0bf21832-6a72-4695-d165-306203d39fed"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_1 (InputLayer)        [(None, 8)]               0         \n","                                                                 \n"," multi_category_encoding (M  (None, 8)                 0         \n"," ultiCategoryEncoding)                                           \n","                                                                 \n"," dense (Dense)               (None, 32)                288       \n","                                                                 \n"," re_lu (ReLU)                (None, 32)                0         \n","                                                                 \n"," dense_1 (Dense)             (None, 32)                1056      \n","                                                                 \n"," re_lu_1 (ReLU)              (None, 32)                0         \n","                                                                 \n"," dropout (Dropout)           (None, 32)                0         \n","                                                                 \n"," regression_head_1 (Dense)   (None, 1)                 33        \n","                                                                 \n","=================================================================\n","Total params: 1377 (5.38 KB)\n","Trainable params: 1377 (5.38 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n","16/16 [==============================] - 0s 2ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[-4.32835102e-01],\n","       [-9.93912220e+00],\n","       [-7.33778402e-02],\n","       [ 2.54696965e-01],\n","       [ 2.09107772e-01],\n","       [ 2.58732915e-01],\n","       [ 9.16190982e-01],\n","       [ 6.41897559e-01],\n","       [-8.54735017e-01],\n","       [-1.10667145e+00],\n","       [ 6.54503182e-02],\n","       [-2.42560530e+00],\n","       [-7.16736674e-01],\n","       [ 9.00137305e-01],\n","       [-9.83273864e-01],\n","       [ 6.16346717e-01],\n","       [ 4.22949910e-01],\n","       [ 5.50958037e-01],\n","       [ 6.71850562e-01],\n","       [ 1.37147510e+00],\n","       [ 3.19380641e-01],\n","       [-6.67436481e-01],\n","       [ 7.93315768e-01],\n","       [ 1.21147692e+00],\n","       [ 7.98002601e-01],\n","       [ 1.94726244e-01],\n","       [ 4.70894456e-01],\n","       [-4.89119172e-01],\n","       [ 2.97109008e-01],\n","       [ 1.08400595e+00],\n","       [ 1.03903067e+00],\n","       [ 2.44389430e-01],\n","       [ 3.46040130e-01],\n","       [ 4.72705245e-01],\n","       [-1.41892970e+00],\n","       [ 4.37780023e-01],\n","       [-3.72881532e-01],\n","       [ 5.78696132e-01],\n","       [ 4.82548833e-01],\n","       [-1.53097308e+00],\n","       [ 2.76434064e-01],\n","       [ 5.04144073e-01],\n","       [ 1.38908613e+00],\n","       [ 1.07860577e+00],\n","       [ 4.56637025e-01],\n","       [ 5.28374076e-01],\n","       [ 5.46329141e-01],\n","       [ 1.12846696e+00],\n","       [ 1.09493887e+00],\n","       [ 1.06204712e+00],\n","       [-5.81453919e-01],\n","       [-3.74067903e-01],\n","       [-4.48048258e+00],\n","       [ 2.48507395e-01],\n","       [ 1.26274431e+00],\n","       [ 1.21370184e+00],\n","       [ 1.16499937e+00],\n","       [ 1.11333692e+00],\n","       [ 6.13638282e-01],\n","       [ 2.27173045e-01],\n","       [ 3.41495395e-01],\n","       [ 1.74324429e+00],\n","       [ 2.65299916e-01],\n","       [ 2.31757417e-01],\n","       [ 2.00817361e-01],\n","       [ 5.29709697e-01],\n","       [ 5.16946673e-01],\n","       [ 2.67119169e-01],\n","       [-9.63940546e-02],\n","       [-4.16343927e+00],\n","       [-1.57185063e-01],\n","       [ 5.75871110e-01],\n","       [ 5.09935975e-01],\n","       [ 4.82048750e-01],\n","       [-5.40512323e-01],\n","       [-2.05906010e+00],\n","       [-2.95968533e+00],\n","       [-2.16212583e+00],\n","       [-3.15869236e+00],\n","       [ 2.28496328e-01],\n","       [-1.43936741e+00],\n","       [ 1.15540349e+00],\n","       [ 8.58382404e-01],\n","       [ 4.41224933e-01],\n","       [ 2.33488098e-01],\n","       [ 1.39773980e-01],\n","       [ 5.85754037e-01],\n","       [-1.75524342e+00],\n","       [ 1.59422055e-01],\n","       [ 6.79003358e-01],\n","       [-2.26004529e+00],\n","       [ 1.92210901e+00],\n","       [ 1.37234342e+00],\n","       [-9.90732074e-01],\n","       [-2.44283199e+00],\n","       [-1.21121111e+01],\n","       [-5.91713285e+00],\n","       [ 4.44825366e-02],\n","       [-6.43680239e+00],\n","       [-4.32517719e+00],\n","       [-7.45759630e+00],\n","       [-8.78733921e+00],\n","       [ 2.46685401e-01],\n","       [ 6.96209311e-01],\n","       [-9.12751293e+00],\n","       [ 1.00118625e+00],\n","       [ 4.55113053e-01],\n","       [ 4.78957057e-01],\n","       [-1.42000878e+00],\n","       [-3.45199442e+00],\n","       [ 9.02405858e-01],\n","       [-4.20090008e+00],\n","       [-4.48782396e+00],\n","       [ 5.45673490e-01],\n","       [ 1.33124724e-01],\n","       [ 3.68132710e-01],\n","       [-8.55534458e+00],\n","       [-3.03217602e+00],\n","       [ 3.36142898e-01],\n","       [-5.25191188e-01],\n","       [-9.47701573e-01],\n","       [ 9.06047642e-01],\n","       [-1.00849593e+00],\n","       [-3.47867370e-01],\n","       [-3.98338675e-01],\n","       [-7.34425592e+00],\n","       [ 9.88277271e-02],\n","       [-1.77607548e+00],\n","       [-4.87296200e+00],\n","       [-1.02486241e+00],\n","       [-1.91596806e+00],\n","       [-1.40256822e+00],\n","       [-1.59165967e+00],\n","       [-5.28847170e+00],\n","       [-9.56426382e-01],\n","       [-1.48646772e+00],\n","       [-1.46196830e+00],\n","       [-4.00400519e-01],\n","       [ 3.51508617e-01],\n","       [-2.56753349e+00],\n","       [ 8.50137472e-01],\n","       [ 7.52794385e-01],\n","       [-1.75588048e+00],\n","       [-1.57896006e+00],\n","       [-1.31708610e+00],\n","       [ 1.54349461e-01],\n","       [ 2.72968888e-01],\n","       [-6.95186019e-01],\n","       [-5.51978707e-01],\n","       [-1.13545859e+00],\n","       [ 3.81499410e-01],\n","       [-6.35030389e-01],\n","       [ 5.34497619e-01],\n","       [ 2.55979896e-01],\n","       [-1.06044352e+00],\n","       [-6.56333804e-01],\n","       [-6.70852065e-01],\n","       [ 2.89064527e-01],\n","       [-5.16826510e-01],\n","       [ 2.80772090e-01],\n","       [ 1.55271664e-01],\n","       [-3.68173718e-01],\n","       [-4.47552800e-01],\n","       [-1.84544432e+00],\n","       [-3.70542336e+00],\n","       [-1.77537024e+00],\n","       [-6.01737142e-01],\n","       [-3.02336884e+00],\n","       [-3.01004601e+00],\n","       [-2.02137327e+00],\n","       [ 8.82337928e-01],\n","       [ 3.84486079e-01],\n","       [-3.49767303e+00],\n","       [-3.29334164e+00],\n","       [ 7.01192737e-01],\n","       [-4.46878076e-01],\n","       [-1.31362602e-02],\n","       [-1.30994380e+00],\n","       [ 6.76837564e-01],\n","       [-1.33550847e+00],\n","       [-2.44544315e+00],\n","       [ 4.82662320e-01],\n","       [ 2.14612857e-01],\n","       [-7.51594663e-01],\n","       [ 6.80595994e-01],\n","       [-1.57229567e+01],\n","       [-2.67903900e+00],\n","       [-1.82944787e+00],\n","       [-2.95750427e+00],\n","       [-1.28962386e+00],\n","       [ 7.32482314e-01],\n","       [-2.00081444e+00],\n","       [ 1.01608884e+00],\n","       [ 4.45607305e-01],\n","       [ 8.55074286e-01],\n","       [-5.80810261e+00],\n","       [ 1.21446836e+00],\n","       [ 1.04865015e+00],\n","       [ 1.06065953e+00],\n","       [ 4.58965659e-01],\n","       [ 4.40390468e-01],\n","       [-2.28450680e+00],\n","       [-2.66395903e+00],\n","       [ 3.52091432e-01],\n","       [-8.25877953e+00],\n","       [-2.35120583e+00],\n","       [ 3.07626128e-01],\n","       [-4.08067703e+00],\n","       [ 3.44713688e-01],\n","       [ 4.44273829e-01],\n","       [-7.40226865e-01],\n","       [-5.70253038e+00],\n","       [ 6.21729493e-01],\n","       [-3.37832594e+00],\n","       [-1.11040080e+00],\n","       [-6.47928190e+00],\n","       [-2.05897570e+00],\n","       [-3.72089073e-02],\n","       [-4.03962517e+00],\n","       [-2.27026320e+00],\n","       [-1.77076828e+00],\n","       [-2.27088022e+00],\n","       [-2.04918098e+00],\n","       [ 4.00194049e-01],\n","       [-4.06557989e+00],\n","       [-7.38301873e-01],\n","       [ 2.32143536e-01],\n","       [ 1.51810065e-01],\n","       [-1.15913078e-02],\n","       [ 2.98807621e-01],\n","       [ 2.66674638e-01],\n","       [-1.05104434e+00],\n","       [ 2.41273299e-01],\n","       [-1.63754904e+00],\n","       [-5.68375111e+00],\n","       [-1.73606122e+00],\n","       [ 7.31338620e-01],\n","       [-2.05027866e+00],\n","       [-2.92691803e+00],\n","       [-2.39033747e+00],\n","       [-2.23076105e+00],\n","       [-3.12566876e-01],\n","       [ 7.42629170e-01],\n","       [ 7.72742152e-01],\n","       [-6.31547785e+00],\n","       [-1.72520745e+00],\n","       [ 7.36997962e-01],\n","       [ 1.07592785e+00],\n","       [-3.39978743e+00],\n","       [-3.47045803e+00],\n","       [-2.20613670e+00],\n","       [-2.67058730e-01],\n","       [ 4.32946205e-01],\n","       [ 8.29379916e-01],\n","       [-2.49986935e+00],\n","       [-5.42395234e-01],\n","       [ 6.13818288e-01],\n","       [ 3.21929574e-01],\n","       [-4.70130014e+00],\n","       [-6.28249049e-01],\n","       [-1.22948658e+00],\n","       [-1.61925018e+00],\n","       [-8.26525331e-01],\n","       [-2.83771038e+00],\n","       [-1.74077761e+00],\n","       [ 2.59074092e-01],\n","       [-9.58119556e-02],\n","       [-4.42577481e-01],\n","       [-1.02895105e+00],\n","       [-3.20240378e-01],\n","       [ 1.65983236e+00],\n","       [ 1.99010506e-01],\n","       [ 3.66091847e-01],\n","       [-4.00198817e-01],\n","       [-3.79514620e-02],\n","       [ 1.60567656e-01],\n","       [ 1.26698866e-01],\n","       [ 3.87215734e-01],\n","       [ 4.48740125e-01],\n","       [ 1.45259038e-01],\n","       [-1.12866990e-01],\n","       [-2.21321821e+00],\n","       [-2.77926731e+00],\n","       [-2.12151031e+01],\n","       [ 1.66118041e-01],\n","       [-4.89502954e+00],\n","       [-2.63955712e-01],\n","       [ 4.10042644e-01],\n","       [ 3.18150997e-01],\n","       [-1.49044618e-01],\n","       [ 6.93645120e-01],\n","       [ 5.48957348e-01],\n","       [-5.08897424e-01],\n","       [-2.90508628e-01],\n","       [-5.25926232e-01],\n","       [-3.30333662e+00],\n","       [-1.33553088e+00],\n","       [-6.15323901e-01],\n","       [-1.67852983e-01],\n","       [-1.41328537e+00],\n","       [ 8.27424407e-01],\n","       [ 3.71971607e-01],\n","       [-5.65850377e-01],\n","       [ 5.02588987e-01],\n","       [ 1.07028973e+00],\n","       [-3.86589885e-01],\n","       [ 5.23113847e-01],\n","       [-5.85772634e-01],\n","       [ 6.61636233e-01],\n","       [ 1.23585117e+00],\n","       [-4.11176324e-01],\n","       [ 4.59941506e-01],\n","       [-2.32359171e+00],\n","       [-8.97746205e-01],\n","       [ 3.73561263e-01],\n","       [ 5.49373507e-01],\n","       [ 9.98152375e-01],\n","       [-5.37580824e+00],\n","       [-1.80828631e+00],\n","       [-4.65246582e+00],\n","       [ 4.80072618e-01],\n","       [-2.32060814e+00],\n","       [ 3.40287805e-01],\n","       [ 3.73670697e-01],\n","       [ 1.62041509e+00],\n","       [ 3.33107710e-01],\n","       [ 1.44635427e+00],\n","       [ 1.83545148e+00],\n","       [ 1.91445625e+00],\n","       [ 1.64078486e+00],\n","       [-5.78860617e+00],\n","       [-2.90649176e+00],\n","       [ 2.68185854e-01],\n","       [ 3.99845243e-01],\n","       [ 5.75174168e-02],\n","       [ 2.61823773e-01],\n","       [ 5.91526389e-01],\n","       [ 7.28089452e-01],\n","       [-1.10354865e+00],\n","       [ 8.42660069e-01],\n","       [ 1.05238354e+00],\n","       [ 6.18081212e-01],\n","       [ 1.36891329e+00],\n","       [ 4.72178578e-01],\n","       [ 1.01887882e+00],\n","       [ 9.35528398e-01],\n","       [-1.72258127e+00],\n","       [-1.97326369e-03],\n","       [ 1.80490866e-01],\n","       [ 7.99078345e-01],\n","       [ 3.83011699e-01],\n","       [-2.63829803e+00],\n","       [-3.10177088e+00],\n","       [ 9.43696141e-01],\n","       [-1.03176868e+00],\n","       [-4.80847001e-01],\n","       [-3.70595360e+00],\n","       [-8.72145057e-01],\n","       [-3.64061832e+00],\n","       [-5.79007268e-01],\n","       [-4.09825945e+00],\n","       [-1.32867539e+00],\n","       [-8.18881914e-02],\n","       [ 3.24154496e-01],\n","       [-4.75841686e-02],\n","       [-2.96025604e-01],\n","       [-1.25665590e-01],\n","       [-3.90312767e+00],\n","       [ 6.79689884e-01],\n","       [-1.58701047e-01],\n","       [-2.82627225e-01],\n","       [ 4.60301042e-01],\n","       [-2.74886990e+00],\n","       [ 7.24473238e-01],\n","       [-3.39528680e-01],\n","       [ 5.84766030e-01],\n","       [-1.59228906e-01],\n","       [ 7.39352584e-01],\n","       [-9.09716725e-01],\n","       [-2.73169160e-01],\n","       [-3.17086101e-01],\n","       [ 3.96510959e-01],\n","       [ 7.45046884e-03],\n","       [ 4.65183616e-01],\n","       [ 4.50181603e-01],\n","       [ 3.36774707e-01],\n","       [ 2.52579093e-01],\n","       [ 1.22463115e-01],\n","       [-1.61513865e+00],\n","       [ 4.74633336e-01],\n","       [ 2.55700469e-01],\n","       [-1.00437803e+01],\n","       [ 3.29452634e-01],\n","       [ 4.44268823e-01],\n","       [ 2.49214068e-01],\n","       [-8.02638817e+00],\n","       [-2.32700729e+00],\n","       [ 2.89857984e-01],\n","       [-1.04537122e-01],\n","       [-5.00590682e-01],\n","       [ 4.43133235e-01],\n","       [-4.84033749e-02],\n","       [-9.34032127e-02],\n","       [ 1.92628279e-01],\n","       [ 6.99194744e-02],\n","       [ 3.64993885e-02],\n","       [ 5.41805103e-02],\n","       [-1.04445994e+00],\n","       [-4.52836677e-02],\n","       [-6.86248466e-02],\n","       [ 1.18277915e-01],\n","       [-1.24738805e-01],\n","       [ 1.59617797e-01],\n","       [ 2.52770782e-01],\n","       [-7.22905517e-01],\n","       [-7.50007749e-01],\n","       [ 2.14537516e-01],\n","       [-1.64346635e+00],\n","       [-8.07381794e-02],\n","       [-7.57677674e-01],\n","       [-1.79376328e+00],\n","       [-1.68391621e+00],\n","       [-1.27764475e+00],\n","       [-1.71515331e-01],\n","       [ 2.02889100e-01],\n","       [-1.42010176e+00],\n","       [ 4.33567643e-01],\n","       [-7.86318660e-01],\n","       [-5.88912129e-01],\n","       [ 2.46369258e-01],\n","       [ 2.59946585e-01],\n","       [ 3.84200215e-01],\n","       [-7.64376283e-01],\n","       [-3.21635365e-01],\n","       [ 5.95685840e-01],\n","       [ 1.06363904e+00],\n","       [ 7.18739152e-01],\n","       [-8.79258275e-01],\n","       [ 5.08474186e-02],\n","       [ 5.36872208e-01],\n","       [-3.26105282e-02],\n","       [-3.11483145e+00],\n","       [ 1.69782534e-01],\n","       [-6.69941828e-02],\n","       [-9.49271843e-02],\n","       [-6.09673142e-01],\n","       [ 1.41399041e-01],\n","       [ 5.27345777e-01],\n","       [-2.00572443e+00],\n","       [ 2.28193417e-01],\n","       [-1.48592007e+00],\n","       [-1.36553419e+00],\n","       [-2.20618868e+00],\n","       [ 2.95086861e-01],\n","       [-2.38087130e+00],\n","       [-3.28027678e+00],\n","       [-9.76539180e-02],\n","       [-5.23433352e+00],\n","       [-3.21503115e+00],\n","       [-6.10901043e-02],\n","       [-8.86311245e+00],\n","       [-2.89409161e+00],\n","       [-4.46438837e+00],\n","       [ 5.66129804e-01],\n","       [-1.97471869e+00],\n","       [ 1.27738371e-01],\n","       [ 4.76673007e-01],\n","       [ 4.52727199e-01],\n","       [-2.35638094e+00],\n","       [ 4.33364034e-01],\n","       [ 5.72913527e-01],\n","       [ 5.67305207e-01],\n","       [-8.18714023e-01],\n","       [-1.76875556e+00],\n","       [ 9.57726315e-02],\n","       [-2.02726746e+00],\n","       [-2.19474420e-01],\n","       [-1.47864923e-01],\n","       [ 4.55131173e-01],\n","       [-2.66452360e+00],\n","       [-1.95802367e+00],\n","       [ 3.86721730e-01],\n","       [ 4.21518207e-01],\n","       [ 5.12122035e-01],\n","       [-5.70326924e-01],\n","       [-1.14596014e+01],\n","       [-2.29816866e+00],\n","       [-2.40316153e+00],\n","       [-1.41549313e+00],\n","       [-2.70558977e+00],\n","       [ 6.70386627e-02],\n","       [ 3.74140859e-01],\n","       [ 7.57775187e-01],\n","       [-6.14914820e-02],\n","       [-2.57133245e+00],\n","       [-1.64467013e+00],\n","       [-2.45700121e+00],\n","       [-3.74346495e+00],\n","       [ 2.21094742e-01],\n","       [ 5.24398685e-01]], dtype=float32)"]},"metadata":{},"execution_count":17}],"source":["model = reg.export_model()\n","model.summary()\n","# numpy array in object (mixed type) is not supported.\n","# you need convert it to unicode or float first.\n","model.predict(x_train)"]},{"cell_type":"markdown","metadata":{"id":"N1FTOnRmprl3"},"source":["## Reference\n","[StructuredDataRegressor](/structured_data_regressor),\n","[AutoModel](/auto_model/#automodel-class),\n","[StructuredDataBlock](/block/#structureddatablock-class),\n","[DenseBlock](/block/#denseblock-class),\n","[StructuredDataInput](/node/#structureddatainput-class),\n","[RegressionHead](/block/#regressionhead-class),\n","[CategoricalToNumerical](/block/#categoricaltonumerical-class).\n"]}],"metadata":{"colab":{"provenance":[{"file_id":"https://github.com/keras-team/autokeras/blob/master/docs/ipynb/structured_data_regression.ipynb","timestamp":1707780525469}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"nbformat":4,"nbformat_minor":0}